% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fp.R
\name{fp_fastpot}
\alias{fp_fastpot}
\title{Fast Potential Calulation}
\usage{
fp_fastpot(
  x,
  y,
  var = "v",
  fun = "e",
  span = 2000,
  beta = 2,
  limit = 10000,
  ncl = 3,
  size = 500,
  verbose = FALSE
)
}
\arguments{
\item{x}{set of observations to compute the potentials from, sf points.}

\item{y}{set of points for which the potentials are computed.}

\item{var}{names of the variables in \code{x} from which potentials are computed.
Quantitative variable with no negative values.}

\item{fun}{spatial interaction function. Options are "p"
(pareto, power law) or "e" (exponential).
For pareto the interaction is defined as: (1 + alpha * mDistance) ^ (-beta).
For "exponential" the interaction is defined as:
exp(- alpha * mDistance ^ beta).
The alpha parameter is computed from parameters given by the user
(\code{beta} and \code{span}).}

\item{span}{distance where the density of probability of the spatial
interaction function equals 0.5.}

\item{beta}{impedance factor for the spatial interaction function.}

\item{limit}{maximum distance used to retrieved \code{x} points, in map units.}

\item{ncl}{number of clusters. \code{ncl} is set to
\code{parallel::detectCores() - 1} by default.}

\item{size}{\code{fp_fastpot} splits \code{y} in smaller chunks and
dispatches the computation in \code{ncl} cores, \code{size} indicates the
size of each chunks.}

\item{verbose}{if TRUE, output messages.}
}
\value{
If only one variable is computed a vector is returned, if more than
one variable is computed a matrix is returned.
}
\description{
stewart with cuttoff (limit) and parrallel.
}
\examples{
\dontrun{
library(sf)
library(cartography)
library(SpatialPosition)

mtq <- st_read(system.file("gpkg/mtq.gpkg", package="cartography"))
grid <- st_make_grid(mtq, cellsize = 500)
grid <- st_sf(id = 1:length(grid), geom = grid)
set.seed(1)
size = 50000
pt <- st_sample(grid, size = size)
pt <- st_sf(id = 1:length(pt), geom = pt)
cc <- st_coordinates(pt)
pt$v <- runif(n = size, 10000, 20000)
pt$v <- pt$v + cc[,1] + cc[,2] / 1000

system.time(
  pot2 <- mcStewart(pt, grid, varname = "v", span = 2000, beta = 2,
                    returnclass = "sf", cl = 3, size  = 100)
)
system.time(
  pot <- fp_fastpot(pt, grid, var = c('v'), fun="e",beta = 2, limit = 10000,
                    ncl = 3, size = 100)
)

plot(pot,pot2$OUTPUT, asp = 1)
lm(pot ~pot2$OUTPUT)$coeff

grid$pot <- pot
par(mfrow = c(1,2))
choroLayer(pot2, var = "OUTPUT", border = NA)
choroLayer(grid, var = "pot", border = NA)
}
}
